/*
IMPORTANTE, cada arquivo na hora de mover para a sua aula respectiva deve ser renomeado para o nome da aula "Aula_x.cs" e a classe dele deve ser renomeada para o nome do arquivo "class Aula_x" e a static void Main deve ser renomeada para static void main, assim evitando erros de compilação do código principal.

Para utilizar um arquivo como principal renomei o nome dele pra "Program.cs" e a classe para "Program". Além do "static void main" para "static void Main".
*/

using System; // Indica que irá usar o sistema, não é mais necessario

class Progam {. . .} // Declara uma classe, no nosso caso é a classe principal.

static void Main(string[] args){. . .} // Método de execução inicial, só deve ter um por programa, o string[] args não é obrigatório.

Console.WriteLine("Hello World!"); // Escreve na tela, no nosso caso é a mensagem Hello World, mas pode ser um valor de variavel, para concatenar você pode utilizar tanto "Text" + "Text" ou $"Text {var}" onde var é a variavel que será concatenada : Console.WriteLine($"Hello {Var}").

// Arrays

// Declarações :

tipo[] nome = new tipo[quantidade]; // Declara um array com tipo x e quantidade x, porém não atribui nada a ele.

// int[] numbers = new int[5];

tipo[] nome = new tipo[quantidade]{valores}; // Declara um array com tipo x e quantidade x, e atribui valores a ele.

// int[] numbers = new int[3]{1,2,3};

tipo[] nome = {valores}; // Declara um array com tipo x e atribui os valores automaticamente, nesse caso o array terá como tamanho a quantidade de valores informados.

// int[] numbers = {1,2,3};

array.GetValue(pos) // Retorna o valor da posição pos do array.

array.GetLength(0) // Retorna o tamanho do array.

// If

if (condição){. . .} // Se a condição for verdadeira, executa o bloco de código.

else if(condição){. . .} // Se a condição anterior for falsa mas a atual é verdadeira for verdadeira executa o bloco de código.

else{. . .} // Se a condição for falsa, executa o bloco de código.

// Variaveis

tipo nome = valor; // Declara uma variavel do tipo desejado com o nome desejado e atribui o valor valor.

// int number = 0;

https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference/builtin-types/built-in-types // Documentação dos tipos primitivos.

var nome = valor; // Declara a variavel mas o seu tipo será atribuido automaticamente na hora da compilação.

// var name = "João";

// As variaves acima são locais, para declarar uma var global declare ela dentro da classe

class Program{static int number = 0 }

Como o método Main é static a variavel precisa ser static para que não ocorra erros.

/*
Nota : No caso do tipo char você deve utilizar '' para determinar o texto, as "" são usadas somente para strings.
Nota : No caso do tipo float você deve colocar um f ao final do número para indicar que é um número de ponto flutuante.
*/

// Formatações :

{var,15} // Indica que irá ter 15 espaços ao lado esquerdo da variavel.

{var,15:c} // Indica que irá ter 15 espaços ao lado esquerdo da variavel e que irá ser impresso como moeda, isso é com R$.

{var,15:p} // Indica que irá ter 15 espaços ao lado esquerdo da variavel e que irá ser impresso como porcentagem, isso é com %.

https://sites.google.com/site/tecguia/formatar-string-c-string-format //Algumas regras de Formatações, não contem todas.

// Constantes

const tipo nome = valor; // Declara uma constante do tipo desejado com o nome desejado e atribui o valor desejado, por via de regra constantes não podem ser alteradas, portanto ela é declarada e não pode ser modificada, caso tente isso irá retornar um erro e nem irá buildar.

// Conversões e ReadLine

Console.ReadLine() // Espera que o usuario digite algo e o retorna, o retorno sempre é do tipo string.

// Para converter existe duas formas, a primeira é utilizando o método tipo.Parse(), a segunda é utilizando o método Convert.Totipo().

// int number = int.Parse("10");

https://docs.microsoft.com/pt-br/dotnet/api/system.convert?view=net-6.0#methods // Documentação dos métodos de conversão.

// int number = Convert.ToInt32("10");

// Bitwise

Bitwise básicamente são operadores que dobram ou dividem pela metade o valor de um número :

O Bitwise para esquerda dobra o valor, enquanto para direita divide o valor pela metade.

/*
10 << 1 == 20; // 10 * 2 = 20
10 << 2 == 40; // 10 * 2 * 2 = 40

20 >> 1 == 10; // 20 / 2 = 10
20 >> 2 == 5; // 20 / 2 / 2 = 5
*/

// Enumerate

Enumerate é uma forma de criar um tipo de dados que possui um conjunto de valores, ou seja, um conjunto de constantes.

Para criar faça o seguinte :

enum name = {value1, value2...}

Por padrão o valor inicial do enumerate é 0, o segundo é 1, o terceiro é 2, e assim por diante.

Para retonrar o valor de um enumerate basta utilizar o nome do enumerate seguido de um ponto e o nome da constante, ou criar uma variavel que seja do mesmo tipo do enum.

// WeekDays wd = WeekDays.Monday;

// Cast

Cast é uma forma de conversão de dados do enum :

// WeekDays wd = (WeekDays)3;

No caso acima ele irá retornar quem está na posição 3 do enum.

// int wd = (int)WeekDays.Monday;

No caso acima ele irá retonrar a posição onde Monday se encontra no enum, no caso 0.

https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference/builtin-types/enum // Documentação do enum.

// switch

Switch é uma estrutura condicional semelhante ao if mas de forma simplificada.

switch(variavel){
    case value1:
        . . .
        break;
    default:
        . . .
        break;
    }

Caso a varaivel atenda ao caso ela irá ser executada, caso não irá executar o default, lembre-se de colocar o break no final de cada caso.

Console.Clear(); // Limpa o console.

// Label

Label é uma especie de varaivel que armazena um trecho de código, que será executado e que você pode retornar para ele usando o comando goto, para criar um label digite o nome de : bloco

/*
start : // Nome do label
    [. . .] // Código que será executado
*/

// goto

goto direciona o código para um label que já foi criado :

goto label_name;

// goto start;